;; Variable declarations

(declare-const x1 Real)
(declare-const x2 Real)

(declare-const w1_1_1 Real)  ; w^(1)_1,1
(declare-const w1_2_1 Real)  ; w^(1)_2,1
(declare-const b1_1   Real)  ; b^(1)_1

(declare-const w1_1_2 Real)  ; w^(1)_1,2
(declare-const w1_2_2 Real)  ; w^(1)_2,2
(declare-const b1_2   Real)  ; b^(1)_2

(declare-const w2_1   Real)  ; w^(2)_1
(declare-const w2_2   Real)  ; w^(2)_2
(declare-const b2     Real)  ; b^(2)

(declare-const g1_1   Real)  ; g^(1)_1
(declare-const g1_2   Real)  ; g^(1)_1
(declare-const g      Real)  ; g

(declare-const f1_1 Real)    ; f^(1)_1
(declare-const f1_2 Real)    ; f^(1)_2
(declare-const f2 Real)      ; f^(2)
(declare-const f_xor Real)   ; f_xor

(declare-const threshold Real)   ; threshold

;; A xor model

(assert (= w1_1_1  3.4243))
(assert (= w1_2_1  3.4299))
(assert (= b1_1   -5.3119))

(assert (= w1_1_2  4.4863))
(assert (= w1_2_2  4.4830))
(assert (= b1_2   -1.7982))

(assert (= w2_1   -7.1722))
(assert (= w2_2    6.7997))
(assert (= b2     -3.0611))

(assert (= threshold 0.1))

;; The xor neural network

(assert (= g1_1 (+ (+ (* x1 w1_1_1) (* x2 w1_2_1)) b1_1)))
(assert (= g1_2 (+ (+ (* x1 w1_1_2) (* x2 w1_2_2)) b1_2)))

(assert (=> (<= g1_1 (- 1))                  (and (< 0 f1_1)    (<= f1_1 0.26))))
(assert (=> (and (< (- 1) g1_1) (<= g1_1 0)) (and (< 0.26 f1_1) (<= f1_1 0.5))))
(assert (=> (and (< 0 g1_1) (<= g1_1 1))  (and (< 0.5 f1_1)  (<= f1_1 0.73))))
(assert (=> (> g1_1 1)                    (and (< 0.73 f1_1) (< f1_1 1))))

(assert (=> (<= g1_2 (- 1))                  (and (< 0 f1_2)    (<= f1_2 0.26))))
(assert (=> (and (< (- 1) g1_2) (<= g1_2 0)) (and (< 0.26 f1_2) (<= f1_2 0.5))))
(assert (=> (and (< 0 g1_2) (<= g1_2 1))  (and (< 0.5 f1_2)  (<= f1_2 0.73))))
(assert (=> (> g1_2 1)                    (and (< 0.73 f1_2) (< f1_2 1))))

(assert (= g    (+ (+ (* f1_1 w2_1) (* f1_2 w2_2)) b2)))

(assert (=> (<= g (- 1))               (and (< 0 f2)    (<= f2 0.26))))
(assert (=> (and (< (- 1) g) (<= g 0)) (and (< 0.26 f2) (<= f2 0.5))))
(assert (=> (and (< 0 g) (<= g 1))  (and (< 0.5 f2)  (<= f2 0.73))))
(assert (=> (> g 1)                 (and (< 0.73 f2) (< f2 1))))

(assert (= f_xor f2))

;; A robustness(functional correctness?) property

;; x1 x2 =xor=> f2

(assert (and (and (<= 0 x1) (< x1 0.5)) (and (<= 0 x2) (< x2 0.5))))

;;  0 <= x1, x2 <= 1
;;  x1  < 0.5 /\ x2  < 0.5  ==> f2 < 0.5
;;  0.5 <= x1 /\ 0.5 <= x2  ==> f2 < 0.5
;;  x1  < 0.5 /\ 0.5 <= x2  ==> 0.5 <= f2
;;  0.5 <= x1 /\ x2  <  0.5 ==> 0.5 <= f2

(assert
  (not
     (and (=> (and (< x1 0.5)  (< x2 0.5))  (< f_xor 0.5 ) )
       (and (=> (and (<= 0.5 x1) (<= 0.5 x2)) (< f_xor 0.5 ) )
         (and (=> (and (< x1 0.5) (<= 0.5 x2)) (<= 0.5 f_xor) )
	        (=> (and (<= 0.5 x1) (< x2 0.5)) (<= 0.5 f_xor) ))))) )


;; ;; Solving

(check-sat)
;; (get-model)

(get-value (x1 x2))
(get-value (f_xor))

;; (get-value (g))
;; (get-value (f1_1))
;; (get-value (f1_2))
;; (get-value (g1_1))
;; (get-value (g1_2))

;; ì‹¤í–‰ ì˜ˆì‹œ
;;
;; $ z3 xor_nn.smtlib
;; sat
;; ((x1 (/ 1.0 4.0))
;;  (x2 (/ 1.0 4.0)))
;; ((f_xor (/ 1.0 2.0)))